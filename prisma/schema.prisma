generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id   String   @id @default(uuid())
  email String @unique
  password  String
  role UserRole 
  needPasswordChange Boolean  @default(true)
  status UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin Admin?
  vendor Vendor?
  customer Customer?

  @@map("users")
}

model Admin {
  id   String   @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  isDeleted  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email],references: [email])

  @@map("admins")

}



model Vendor {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])
  shop Shop?
  @@map("vendors")
}

model Customer {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  CustomerFollowsShop CustomerFollowsShop[]

  products Products[]
  review Reviews[]
  orders Orders[]
  @@map("customers")
}

model Shop {
  id            String   @id @unique @default(uuid())
  shopName          String
  shopLogo  String?
  description String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  restricted    Boolean  @default(false)
  follower      Int     @default(0)
  CustomerFollowsShop CustomerFollowsShop[]

  products Products[]
  vendorId      String  @unique
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  @@map("shops")
}

model CustomerFollowsShop {
  customerId String
  customer Customer @relation(fields: [customerId], references: [id])

  shopId     String
  shop       Shop   @relation(fields: [shopId], references: [id])


  @@id([customerId, shopId]) 
  @@map("customerFollowsShops") 
}




model Products {
  id            String   @id @unique @default(uuid())
  name          String
  description   String
  inventoryCount  Int
  images String?
  price         Float
  discount      Int? @default(0)
  flashSale     Boolean @default(false)
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  shopId        String
  shop          Shop     @relation(fields: [shopId], references: [id])
  
  customerId String?
  customer Customer? @relation(fields: [customerId],references: [id])
  categories Categories[]
  orderItems    OrderItem[]
  reviewProducts ReviewProducts[]

  @@map("products")
}

model ProductCategory {
  id            String   @id @unique @default(uuid())
  name          String
  categoryImage String
  categories Categories[]

  @@map("productCategories")
}

model Categories{
  productId String 
  products Products @relation(fields: [productId], references: [id])
  categoryId String 
  productCategory ProductCategory @relation(fields: [categoryId], references: [id])

  @@id([productId,categoryId])
  @@map("categories")
}

model Reviews{
  id            String   @id @unique @default(uuid())
  productId String
  rating Float
  review String
  customerId String
  customer Customer @relation(fields: [customerId], references: [id])
  reviewProducts ReviewProducts[]
  
  @@map("reviews")
}

model ReviewProducts{
  id String @id @unique @default(uuid())
  reviewId String
  productId String
  products Products @relation(fields: [productId], references: [id])
  reviews Reviews @relation(fields: [reviewId], references: [id])


  @@map("reviewproducts")
}

model Orders{
  id            String   @id @unique @default(uuid())
  orderDate DateTime
  orderStatus   OrderStatus @default(PENDING)
  PaymentStatus PaymentStatus @default(PENDING)
  customerId String
  customer Customer @relation(fields: [customerId], references: [id])
  orderItems    OrderItem[] 

  @@map("orders")
}

model OrderItem {
  id            String   @id @unique @default(uuid())
  orderId       String
  productId     String
  quantity      Int
  price         Float 

  product       Products @relation(fields: [productId], references: [id])
  order         Orders   @relation(fields: [orderId], references: [id])

  @@map("orderItems")
}


enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}


enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  COMPLETED
  PENDING
}
