generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id   String   @id @default(uuid())
  email String @unique
  password  String
  role UserRole 
  needPasswordChange Boolean  @default(true)
  status UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@map("users")
}

model Customer {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  products Products[]
  review Reviews[]
  orders Orders[]
  @@map("customers")
}

model Vendor {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  shop Shop[]
  @@map("vendors")
}

model Shop {
  id            String   @id @unique @default(uuid())
  shopName          String
  shopLogo  String?
  description String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  vendor Vendor @relation(fields: [id], references: [id])
  @@map("shops")
}


model Products {
  id            String   @id @unique @default(uuid())
  name          String
  description   String
  inventoryCount  Int
  images String?
  discount      Int? @default(0)
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  categories Categories[]
  customer Customer @relation(fields: [id],references: [id])

  @@map("products")
}

model ProductCategory {
  id            String   @id @unique @default(uuid())
  name          String
  categories Categories[]

  @@map("productCategories")
}

model Categories{
  productId String 
  products Products @relation(fields: [productId], references: [id])
  categoryId String 
  productCategory ProductCategory @relation(fields: [categoryId], references: [id])

  @@id([productId,categoryId])
}

model Reviews{
  id            String   @id @unique @default(uuid())
  productId String
  customerId String
  rating Int
  review String
  customer Customer @relation(fields: [customerId], references: [id])
  
  @@map("reviews")
}

model Orders{
  id            String   @id @unique @default(uuid())
  productId String
  customerId String
  quantity Int
  orderDate DateTime
  customer Customer @relation(fields: [customerId], references: [id])

  @@map("orders")
}




enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}
